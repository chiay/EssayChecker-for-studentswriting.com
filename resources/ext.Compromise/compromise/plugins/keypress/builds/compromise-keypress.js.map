{"version":3,"file":"compromise-keypress.js","sources":["../src/index.js"],"sourcesContent":["const addMethods = function(Doc, world, nlp) {\n  let sentenceCache = {}\n\n  /** memoize tagger per-sentence */\n  nlp.keypress = function(str, options) {\n    //do a quick-parse on the text\n    let doc = nlp.tokenize(str, options)\n    let arr = doc.json({ terms: false })\n\n    let list = []\n    arr.forEach(o => {\n      //do we already have it parsed?\n      if (sentenceCache.hasOwnProperty(o.text) === true) {\n        //use the cache\n        list.push(sentenceCache[o.text].data)\n        sentenceCache[o.text].used = true\n        // console.log('used cache: ', o.text, '\\n')\n      } else {\n        //otherwise, parse it!\n        let json = nlp(o.text, options).json(0)\n        //cache it\n        sentenceCache[o.text] = {\n          data: json,\n          used: true,\n        }\n        // used[o.text] = true\n        list.push(json)\n      }\n    })\n    // delete any unused cache\n    Object.keys(sentenceCache).forEach(k => {\n      if (sentenceCache[k].used !== true) {\n        delete sentenceCache[k]\n      } else {\n        sentenceCache[k].used = null\n      }\n    })\n\n    return nlp.fromJSON(list)\n  }\n\n  /** clear the sentence cache */\n  nlp.clear = function() {\n    sentenceCache = {}\n  }\n\n  /**  undocumented function for debugging the plugin **/\n  nlp._sentenceCache = function() {\n    return sentenceCache\n  }\n}\n\nmodule.exports = addMethods\n"],"names":["addMethods","Doc","world","nlp","sentenceCache","keypress","str","options","doc","tokenize","arr","json","terms","list","forEach","o","hasOwnProperty","text","push","data","used","Object","keys","k","fromJSON","clear","_sentenceCache"],"mappings":";;;;;;;EAAA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAASC,GAAT,EAAcC,KAAd,EAAqBC,GAArB,EAA0B;EAC3C,MAAIC,aAAa,GAAG,EAApB;;;EAGAD,EAAAA,GAAG,CAACE,QAAJ,GAAe,UAASC,GAAT,EAAcC,OAAd,EAAuB;;EAEpC,QAAIC,GAAG,GAAGL,GAAG,CAACM,QAAJ,CAAaH,GAAb,EAAkBC,OAAlB,CAAV;EACA,QAAIG,GAAG,GAAGF,GAAG,CAACG,IAAJ,CAAS;EAAEC,MAAAA,KAAK,EAAE;EAAT,KAAT,CAAV;EAEA,QAAIC,IAAI,GAAG,EAAX;EACAH,IAAAA,GAAG,CAACI,OAAJ,CAAY,UAAAC,CAAC,EAAI;;EAEf,UAAIX,aAAa,CAACY,cAAd,CAA6BD,CAAC,CAACE,IAA/B,MAAyC,IAA7C,EAAmD;;EAEjDJ,QAAAA,IAAI,CAACK,IAAL,CAAUd,aAAa,CAACW,CAAC,CAACE,IAAH,CAAb,CAAsBE,IAAhC;EACAf,QAAAA,aAAa,CAACW,CAAC,CAACE,IAAH,CAAb,CAAsBG,IAAtB,GAA6B,IAA7B,CAHiD;EAKlD,OALD,MAKO;;EAEL,YAAIT,IAAI,GAAGR,GAAG,CAACY,CAAC,CAACE,IAAH,EAASV,OAAT,CAAH,CAAqBI,IAArB,CAA0B,CAA1B,CAAX,CAFK;;EAILP,QAAAA,aAAa,CAACW,CAAC,CAACE,IAAH,CAAb,GAAwB;EACtBE,UAAAA,IAAI,EAAER,IADgB;EAEtBS,UAAAA,IAAI,EAAE;EAFgB,SAAxB,CAJK;;EASLP,QAAAA,IAAI,CAACK,IAAL,CAAUP,IAAV;EACD;EACF,KAlBD,EANoC;;EA0BpCU,IAAAA,MAAM,CAACC,IAAP,CAAYlB,aAAZ,EAA2BU,OAA3B,CAAmC,UAAAS,CAAC,EAAI;EACtC,UAAInB,aAAa,CAACmB,CAAD,CAAb,CAAiBH,IAAjB,KAA0B,IAA9B,EAAoC;EAClC,eAAOhB,aAAa,CAACmB,CAAD,CAApB;EACD,OAFD,MAEO;EACLnB,QAAAA,aAAa,CAACmB,CAAD,CAAb,CAAiBH,IAAjB,GAAwB,IAAxB;EACD;EACF,KAND;EAQA,WAAOjB,GAAG,CAACqB,QAAJ,CAAaX,IAAb,CAAP;EACD,GAnCD;;;;EAsCAV,EAAAA,GAAG,CAACsB,KAAJ,GAAY,YAAW;EACrBrB,IAAAA,aAAa,GAAG,EAAhB;EACD,GAFD;;;;EAKAD,EAAAA,GAAG,CAACuB,cAAJ,GAAqB,YAAW;EAC9B,WAAOtB,aAAP;EACD,GAFD;EAGD,CAlDD;;EAoDA,OAAc,GAAGJ,UAAjB;;;;;;;;"}
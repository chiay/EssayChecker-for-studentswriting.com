{"version":3,"file":"compromise-scan.js","sources":["../src/build.js","../src/scan.js","../src/index.js"],"sourcesContent":["// edited by Spencer Kelly\n// credit to https://github.com/BrunoRB/ahocorasick by Bruno Roberto BÃºrigo.\n\n// object v. array\nconst isObject = function(obj) {\n  return obj && Object.prototype.toString.call(obj) === '[object Object]'\n}\n\n// turn an array or object into a compressed aho-corasick structure\nconst buildTrie = function(keywords) {\n  let values = []\n  const isObj = isObject(keywords)\n  if (isObj === true) {\n    keywords = Object.keys(keywords).map(k => {\n      values.push(keywords[k])\n      return k\n    })\n  }\n  let gotoFn = {\n    0: {},\n  }\n  let output = {}\n\n  let state = 0\n  keywords.forEach(function(word, w) {\n    let value = true\n    if (values[w] !== undefined) {\n      value = values[w]\n    }\n    let curr = 0\n    let words = word.split(/ /g)\n    for (let i = 0; i < words.length; i++) {\n      let l = words[i]\n      if (gotoFn[curr] && l in gotoFn[curr]) {\n        curr = gotoFn[curr][l]\n      } else {\n        state++\n        gotoFn[curr][l] = state\n        gotoFn[state] = {}\n        curr = state\n        output[state] = []\n      }\n    }\n\n    output[curr] = [{ len: words.length, value: value }]\n  })\n\n  let failure = {}\n  let xs = []\n\n  // f(s) = 0 for all states of depth 1 (the ones from which the 0 state can transition to)\n  for (let l in gotoFn[0]) {\n    state = gotoFn[0][l]\n    failure[state] = 0\n    xs.push(state)\n  }\n\n  while (xs.length) {\n    let r = xs.shift()\n    // for each symbol a such that g(r, a) = s\n    for (let l in gotoFn[r]) {\n      let s = gotoFn[r][l]\n      xs.push(s)\n\n      // set state = f(r)\n      state = failure[r]\n      while (state > 0 && !(l in gotoFn[state])) {\n        state = failure[state]\n      }\n\n      if (l in gotoFn[state]) {\n        let fs = gotoFn[state][l]\n        failure[s] = fs\n        output[s] = output[s].concat(output[fs])\n      } else {\n        failure[s] = 0\n      }\n    }\n  }\n  return {\n    isObj: isObj,\n    gotoFn: gotoFn,\n    output: output,\n    failure: failure,\n  }\n}\nmodule.exports = buildTrie\n","// follow our trie structure\nconst scanWords = function(terms, trie) {\n  let state = 0\n  let results = []\n  for (let i = 0; i < terms.length; i++) {\n    let l = terms[i].reduced\n    if (trie.gotoFn[state] === undefined) {\n      trie.gotoFn[state] = []\n    }\n    while (state > 0 && !(l in trie.gotoFn[state])) {\n      state = trie.failure[state]\n    }\n    if (!(l in trie.gotoFn[state])) {\n      continue\n    }\n\n    state = trie.gotoFn[state][l]\n    if (trie.output[state] !== undefined) {\n      let arr = trie.output[state]\n      for (let o = 0; o < arr.length; o++) {\n        let obj = arr[o]\n        let start = terms[i - obj.len + 1]\n        results.push({ id: start.id, len: obj.len, value: obj.value })\n      }\n    }\n  }\n  return results\n}\n\nconst scan = function(doc, trie) {\n  let results = []\n  // do each phrase\n  for (let i = 0; i < doc.list.length; i++) {\n    let words = doc.list[i].terms() || []\n    let found = scanWords(words, trie)\n    if (found.length > 0) {\n      results = results.concat(found)\n    }\n  }\n  let byVal = {}\n  let p = doc.list[0]\n  results.forEach(obj => {\n    byVal[obj.value] = byVal[obj.value] || []\n    byVal[obj.value].push(p.buildFrom(obj.id, obj.len))\n  })\n  Object.keys(byVal).forEach(k => {\n    byVal[k] = doc.buildFrom(byVal[k])\n  })\n  // return object-format\n  if (trie.isObj === true) {\n    return byVal\n  }\n  // return array format\n  return byVal[true] || []\n}\nmodule.exports = scan\n","const buildTrie = require('./build')\nconst scan = require('./scan')\n\nconst addMethod = function(Doc, world, nlp) {\n  /** turn an array or object into a compressed trie*/\n  nlp.buildTrie = function(obj) {\n    return buildTrie(obj)\n  }\n\n  /** find all matches in this document */\n  Doc.prototype.scan = function(trie) {\n    // cache it first\n    if (!this._cache || this._cache.set !== true) {\n      this.cache()\n    }\n    return scan(this, trie)\n  }\n\n  return Doc\n}\nmodule.exports = addMethod\n"],"names":["isObject","obj","Object","prototype","toString","call","buildTrie","keywords","values","isObj","keys","map","k","push","gotoFn","output","state","forEach","word","w","value","undefined","curr","words","split","i","length","l","len","failure","xs","r","shift","s","fs","concat","scanWords","terms","trie","results","reduced","arr","o","start","id","scan","doc","list","found","byVal","p","buildFrom","addMethod","Doc","world","nlp","_cache","set","cache"],"mappings":"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"}
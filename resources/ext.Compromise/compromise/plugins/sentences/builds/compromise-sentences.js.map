{"version":3,"file":"compromise-sentences.js","sources":["../src/mainClause.js","../src/parse.js","../src/methods/negate.js","../src/methods/types/isQuestion.js","../src/methods/types/index.js","../src/methods/tense.js","../src/methods/index.js","../src/index.js"],"sourcesContent":["// if a clause starts with these, it's not a main clause\nconst subordinate = `(after|although|as|because|before|if|since|than|that|though|when|whenever|where|whereas|wherever|whether|while|why|unless|until|once)`\nconst relative = `(that|which|whichever|who|whoever|whom|whose|whomever)`\n\n//try to remove secondary clauses\nconst mainClause = function(og) {\n  let m = og.clone(true)\n  if (m.length === 1) {\n    return m\n  }\n  // if there's no verb?\n  m = m.if('#Verb')\n  if (m.length === 1) {\n    return m\n  }\n  // this is a signal for subordinate-clauses\n  m = m.ifNo(subordinate)\n  m = m.ifNo('^even (if|though)')\n  m = m.ifNo('^so that')\n  m = m.ifNo('^rather than')\n  m = m.ifNo('^provided that')\n  if (m.length === 1) {\n    return m\n  }\n  // relative clauses\n  m = m.ifNo(relative)\n  if (m.length === 1) {\n    return m\n  }\n\n  m = m.ifNo('(despite|during|before|through|throughout)')\n  if (m.length === 1) {\n    return m\n  }\n  // did we go too far?\n  if (m.length === 0) {\n    m = og\n  }\n  // choose the first one?\n  return m.eq(0)\n}\nmodule.exports = mainClause\n","const mainClause = require('./mainClause')\n\nconst parse = function(doc) {\n  let clauses = doc.clauses()\n  let main = mainClause(clauses)\n  let nouns = main.match('#Determiner? (#Noun|#Adjective)+').if('#Noun')\n  let verb = main.verbs().eq(0)\n  // match('(do|will)? not? #Verb+ not?').eq(0)\n  return {\n    subject: nouns.eq(0),\n    verb: verb,\n    object: verb.lookAhead('.*'),\n  }\n}\nmodule.exports = parse\n","const parse = require('../parse')\n\n/** he walks -> he did not walk */\nexports.toNegative = function() {\n  this.forEach(doc => {\n    let obj = parse(doc)\n    let vb = obj.verb.clone()\n    vb = vb.verbs().toNegative()\n    obj.verb.replaceWith(vb, false)\n  })\n  return this\n}\n/** he doesn't walk -> he walks */\nexports.toPositive = function() {\n  this.forEach(doc => {\n    let obj = parse(doc)\n    let vb = obj.verb.clone()\n    vb = vb.verbs().toPositive()\n    obj.verb.replaceWith(vb, false)\n  })\n  return this\n}\n","//is this sentence asking a question?\nconst isQuestion = function (doc) {\n  let endPunct = doc.post()\n  let clauses = doc.clauses()\n\n  if (/\\?/.test(endPunct) === true) {\n    return true\n  }\n\n  // Has ellipsis at the end means it's probably not a question\n  // e.g., Is this just fantasy...\n  if (/\\.\\.$/.test(doc.out('text'))) {\n    return false\n  }\n\n  // Starts with question word, but has a comma, so probably not a question\n  // e.g., Why are we caught in a land slide, no escape from reality\n  if (doc.has('^#QuestionWord') && doc.has('#Comma')) {\n    return false\n  }\n\n  // Starts with a #QuestionWord\n  // e.g., What open your eyes look up to the skies and see\n  if (doc.has('^#QuestionWord')) {\n    return true\n  }\n\n  // Second word is a #QuestionWord\n  // e.g., I'm what a poor boy\n  // case ts.has('^\\w+\\s#QuestionWord'):\n  // return true;\n\n  // is it, do you - start of sentence\n  // e.g., Do I need no sympathy\n  if (doc.has('^(do|does|did|is|was|can|could|will|would|may) #Noun')) {\n    return true\n  }\n\n  // these are a little more loose..\n  // e.g., Must I be come easy come easy go\n  if (doc.has('^(have|must) you')) {\n    return true\n  }\n\n  // Clause starts with a question word\n  // e.g., Anyway the wind blows, what doesn't really matter to me\n  if (clauses.has('^#QuestionWord')) {\n    return true\n  }\n\n  //is wayne gretskzy alive\n  if (clauses.has('(do|does|is|was) #Noun+ #Adverb? (#Adjective|#Infinitive)$')) {\n    return true\n  }\n\n  // Probably not a question\n  return false\n}\nmodule.exports = isQuestion\n","const isQuestion = require('./isQuestion')\n\n/** return sentences ending with '?' */\nexports.isQuestion = function () {\n  return this.filter((d) => isQuestion(d))\n}\n/** return sentences ending with '!' */\nexports.isExclamation = function () {\n  return this.filter((doc) => {\n    let term = doc.lastTerm().termList(0)\n    return term.hasPost('!')\n  })\n}\n/** return sentences with neither a question or an exclamation */\nexports.isStatement = function () {\n  return this.filter((doc) => {\n    let term = doc.lastTerm().termList(0)\n    return !term.hasPost('?') && !term.hasPost('!')\n  })\n}\n\n/** 'he is.' -> 'he is!' */\nexports.toExclamation = function () {\n  this.post('!')\n  return this\n}\n/** 'he is.' -> 'he is?' */\nexports.toQuestion = function () {\n  this.post('?')\n  return this\n}\n/** 'he is?' -> 'he is.' */\nexports.toStatement = function () {\n  this.post('.')\n  return this\n}\n","const parse = require('../parse')\n\n// 'i could drive' -> 'i could have driven'\nconst useParticiple = function (vb) {\n  if (vb.has('(could|should|would|may|can|must)')) {\n    return true\n  }\n  return false\n}\n\n/** he walks -> he walked */\nexports.toPastTense = function () {\n  this.forEach((doc) => {\n    if (doc.has('#PastTense')) {\n      return\n    }\n    let obj = parse(doc)\n    let vb = obj.verb.clone()\n    // support 'he could drive' -> 'he could have driven'\n    if (useParticiple(vb)) {\n      vb = vb.verbs().toParticiple()\n      obj.verb.replaceWith(vb, false)\n    } else {\n      //do a normal conjugation\n      vb = vb.verbs().toPastTense()\n      obj.verb.replaceWith(vb, false)\n    }\n    // trailing gerund/future/present are okay, but 'walked and eats' is not\n    if (obj.object && obj.object.found && obj.object.has('#PresentTense')) {\n      let verbs = obj.object.verbs()\n      verbs.if('#PresentTense').verbs().toPastTense()\n    }\n  })\n  return this\n}\n\n/** he drives -> he has driven */\nexports.toParticiple = function () {\n  this.forEach((doc) => {\n    if (doc.has('has #Participle')) {\n      return\n    }\n    let obj = parse(doc)\n    let vb = obj.verb.clone()\n    vb = vb.verbs().toParticiple()\n    obj.verb.replaceWith(vb, false)\n    // trailing gerund/future/present are okay, but 'walked and eats' is not\n    if (obj.object && obj.object.found && obj.object.has('#PresentTense')) {\n      let verbs = obj.object.verbs()\n      verbs.if('#PresentTense').verbs().toParticiple()\n    }\n  })\n  return this\n}\n\n/** he walked -> he walks */\nexports.toPresentTense = function () {\n  this.forEach((doc) => {\n    let obj = parse(doc)\n    let isPlural = obj.verb.lookBehind('(i|we) (#Adverb|#Verb)?$').found\n    let vb = obj.verb.clone()\n    // 'i look', not 'i looks'\n    if (isPlural) {\n      //quick hack for copula verb - be/am\n      if (vb.has('(is|was|am|be)')) {\n        vb = vb.replace('will? (is|was|am|be)', 'am')\n      } else {\n        vb = vb.verbs().toInfinitive()\n      }\n    } else {\n      //'he looks'\n      vb = vb.verbs().toPresentTense()\n    }\n    obj.verb.replaceWith(vb, false)\n\n    // future is okay, but 'walks and ate' -> 'walks and eats'\n    if (obj.object && obj.object.found && obj.object.has('#PastTense')) {\n      let verbs = obj.object.verbs()\n      verbs.if('#PastTense').verbs().toPresentTense()\n    }\n  })\n  return this\n}\n\n/**he walked -> he will walk */\nexports.toFutureTense = function () {\n  this.forEach((doc) => {\n    let obj = parse(doc)\n    let vb = obj.verb.clone()\n    vb = vb.verbs().toFutureTense()\n    obj.verb.replaceWith(vb, false)\n    //Present is okay, but 'will walk and ate' -> 'will walk and eat'\n    if (obj.object && obj.object.found && obj.object.has('(#PastTense|#PresentTense)')) {\n      let verbs = obj.object.verbs()\n      verbs.if('(#PastTense|#PresentTense)').verbs().toInfinitive()\n    }\n  })\n  return this\n}\n\n// toContinuous() {\n//   return this\n// }\n","module.exports = Object.assign({}, require('./negate'), require('./types'), require('./tense'))\n","const parse = require('./parse')\nconst methods = require('./methods')\n\nconst addMethod = function (Doc) {\n  /**  */\n  class Sentences extends Doc {\n    constructor(list, from, world) {\n      list = list.map((p) => p.clone(true))\n      super(list, from, world)\n    }\n\n    /** overload the original json with noun information */\n    json(options) {\n      let n = null\n      if (typeof options === 'number') {\n        n = options\n        options = null\n      }\n      options = options || { text: true, normal: true, trim: true, terms: true }\n      let res = []\n      this.forEach((doc) => {\n        let json = doc.json(options)[0]\n        let obj = parse(doc)\n        json.subject = obj.subject.json(options)[0]\n        json.verb = obj.verb.json(options)[0]\n        json.object = obj.object.json(options)[0]\n        res.push(json)\n      })\n      if (n !== null) {\n        return res[n]\n      }\n      return res\n    }\n\n    /** the main noun of the sentence */\n    subjects() {\n      return this.map((doc) => {\n        let res = parse(doc)\n        return res.subject\n      })\n    }\n\n    /** return sentences that are in passive-voice */\n    isPassive() {\n      return this.if('was #Adverb? #PastTense #Adverb? by') //haha\n    }\n\n    /** add a word to the start of this sentence */\n    prepend(str) {\n      this.forEach((doc) => {\n        // repair the titlecase\n        let firstTerms = doc.match('^.')\n        firstTerms.not('#ProperNoun').toLowerCase()\n        // actually add the word\n        firstTerms.prepend(str)\n        // add a titlecase\n        firstTerms.terms(0).toTitleCase()\n      })\n      return this\n    }\n\n    /** add a word to the end of this sentence */\n    append(str) {\n      let hasEnd = /[.?!]\\s*$/.test(str)\n      this.forEach((doc) => {\n        let end = doc.match('.$')\n        let lastTerm = end.termList(0)\n        let punct = lastTerm.post\n        if (hasEnd === true) {\n          punct = ''\n        }\n        // add punctuation to the end\n        end.append(str + punct)\n        // remove punctuation from the former last-term\n        lastTerm.post = ' '\n      })\n      return this\n    }\n  }\n  // add some aliases\n  methods.questions = methods.isQuestion\n  methods.exclamations = methods.isExclamation\n  methods.statements = methods.isStatement\n\n  Object.assign(Sentences.prototype, methods)\n\n  /** overload original sentences() method and return Sentence class**/\n  Doc.prototype.sentences = function (n) {\n    let arr = []\n    this.list.forEach((p) => {\n      arr.push(p.fullSentence())\n    })\n    //grab (n)th result\n    let s = new Sentences(arr, this, this.world)\n    if (typeof n === 'number') {\n      s = s.get(n)\n    }\n    return s\n  }\n  return Doc\n}\nmodule.exports = addMethod\n"],"names":["subordinate","relative","mainClause","og","m","clone","length","ifNo","eq","parse","doc","clauses","main","nouns","match","verb","verbs","subject","object","lookAhead","forEach","obj","vb","toNegative","replaceWith","toPositive","isQuestion","endPunct","post","test","out","has","filter","d","term","lastTerm","termList","hasPost","useParticiple","toParticiple","toPastTense","found","isPlural","lookBehind","replace","toInfinitive","toPresentTense","toFutureTense","Object","assign","require$$0","require$$1","require$$2","addMethod","Doc","Sentences","list","from","world","map","p","options","n","text","normal","trim","terms","res","json","push","str","firstTerms","not","toLowerCase","prepend","toTitleCase","hasEnd","end","punct","append","methods","questions","exclamations","isExclamation","statements","isStatement","prototype","sentences","arr","fullSentence","s","get"],"mappings":"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"}
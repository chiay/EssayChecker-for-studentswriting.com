{"version":3,"file":"compromise-paragraphs.js","sources":["../src/methods.js","../src/index.js"],"sourcesContent":["const addMethods = function(Paragraphs, Doc) {\n  const methods = {\n    // return back to a regular Doc object\n    sentences: function(n) {\n      let list = []\n      this.paragraphs.forEach(docs => {\n        docs.forEach(doc => {\n          list = list.concat(doc.list)\n        })\n      })\n      let doc = new Doc(list, this.parent, this.world)\n      if (typeof n === 'number') {\n        return doc.eq(n)\n      }\n      return doc\n    },\n\n    // grab every term in the paragraph\n    terms: function(n) {\n      let list = []\n      this.paragraphs.forEach(docs => {\n        docs.forEach(doc => {\n          list = list.concat(doc.terms().list)\n        })\n      })\n      let doc = new Doc(list, this.parent, this.world)\n      if (typeof n === 'number') {\n        return doc.eq(n)\n      }\n      return doc\n    },\n\n    /** return metadata for each paragraph */\n    json: function(options = {}) {\n      return this.paragraphs.map(docs => {\n        let text = docs.map(d => d.text()).join('')\n        let obj = {\n          text: text,\n          sentences: docs.map(d => d.json(options)),\n        }\n        if (options.normal) {\n          obj.normal = docs.map(d => d.text('normal')).join('')\n        }\n        return obj\n      })\n    },\n\n    /** print out the text of each paragraph */\n    text: function(options) {\n      let text = ''\n      this.paragraphs.forEach(docs => {\n        docs.forEach(doc => {\n          text += doc.text(options)\n        })\n      })\n      return text\n    },\n\n    // accessor method wrappers\n    eq: function(n) {\n      let list = [this.paragraphs[n]]\n      list = list.filter(l => l)\n      return new Paragraphs(list, this, this.world)\n    },\n    first: function() {\n      return this.eq(0)\n    },\n    last: function() {\n      let len = this.length\n      return this.eq(len - 1)\n    },\n    debug: function() {\n      this.paragraphs.forEach(docs => {\n        console.log('\\n=-=-=-=-')\n        docs.forEach(doc => {\n          doc.debug()\n        })\n      })\n    },\n\n    // match methods\n\n    // returns doc objects, not paragraph objects\n    match: function(str) {\n      let list = []\n      this.paragraphs.forEach(docs => {\n        docs.forEach(doc => {\n          let m = doc.match(str)\n          if (m.found) {\n            list = list.concat(m.list)\n          }\n        })\n      })\n      return new Doc(list, this.parent, this.world)\n    },\n    // returns doc objects\n    not: function(str) {\n      let list = []\n      this.paragraphs.forEach(docs => {\n        docs.forEach(doc => {\n          let m = doc.not(str)\n          if (m.found) {\n            list = list.concat(m.list)\n          }\n        })\n      })\n      return new Doc(list, this.parent, this.world)\n    },\n    // returns paragraph objects\n    if: function(str) {\n      let list = this.paragraphs.filter(docs => {\n        return docs.some(doc => doc.has(str))\n      })\n      return new Paragraphs(list, this, this.world)\n    },\n    ifNo: function(str) {\n      let list = this.paragraphs.filter(docs => {\n        return docs.some(doc => doc.has(str) === false)\n      })\n      return new Paragraphs(list, this, this.world)\n    },\n    // returns boolean\n    has: function(str) {\n      return this.paragraphs.some(docs => {\n        return docs.some(doc => doc.has(str))\n      })\n    },\n\n    //loops\n    forEach: function(fn) {\n      this.paragraphs.forEach(docs => {\n        let p = new Paragraphs([docs], this, this.world)\n        fn(p)\n      })\n      return this\n    },\n    map: function(fn) {\n      let paragraphs = this.paragraphs.map(docs => {\n        let p = new Paragraphs([docs], this, this.world)\n        return fn(p)\n      })\n      new Paragraphs(paragraphs, this, this.world)\n    },\n\n    //each paragraph must have atleast one sentence that matches\n    filter: function(fn) {\n      this.paragraphs = this.paragraphs.filter(docs => {\n        return docs.some(fn)\n      })\n      return this\n    },\n  }\n  // aliases\n  methods.get = methods.eq\n\n  Object.keys(methods).forEach(k => {\n    Paragraphs.prototype[k] = methods[k]\n  })\n}\nmodule.exports = addMethods\n","const hasTwoNewline = /\\n\\n/\nconst wrapperMethods = require('./methods')\n\nconst addMethods = function(Doc) {\n  /** an abstraction on top of Doc */\n  class Paragraphs {\n    constructor(paragraphs, parent, world) {\n      Object.defineProperty(this, 'paragraphs', {\n        enumerable: false,\n        writable: true,\n        value: paragraphs,\n      })\n      this.parent = parent\n      this.world = world\n      //'found' getter\n      Object.defineProperty(this, 'found', {\n        get: () => this.paragraphs.length > 0,\n      })\n      //'length' getter\n      Object.defineProperty(this, 'length', {\n        get: () => this.paragraphs.length,\n      })\n    }\n  }\n  // add our wrapper methods for Doc\n  wrapperMethods(Paragraphs, Doc)\n\n  // finder method creates the sentence groups\n  Doc.prototype.paragraphs = function(n) {\n    let match = this.all()\n    let results = []\n    let carry = []\n    match.forEach(s => {\n      carry.push(s)\n      if (hasTwoNewline.test(s.post()[0])) {\n        results.push(carry)\n        carry = []\n      }\n    })\n    if (carry.length > 0) {\n      results.push(carry)\n    }\n    if (typeof n === 'number') {\n      if (results[n]) {\n        results = [results[n]]\n      } else {\n        results = []\n      }\n    }\n    return new Paragraphs(results, this, this.world)\n  }\n}\n\nmodule.exports = addMethods\n"],"names":["addMethods","Paragraphs","Doc","methods","sentences","n","list","paragraphs","forEach","docs","doc","concat","parent","world","eq","terms","json","options","map","text","d","join","obj","normal","filter","l","first","last","len","length","debug","console","log","match","str","m","found","not","some","has","ifNo","fn","p","get","Object","keys","k","prototype","hasTwoNewline","defineProperty","enumerable","writable","value","wrapperMethods","all","results","carry","s","push","test","post"],"mappings":"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"}